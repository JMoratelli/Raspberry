#!/bin/bash
echo "Script para configurar o sistema como root."

# Função para verificar se a senha root está definida
check_root_password() {
  if ! getent shadow root | grep -q ':\*:' && ! getent shadow root | grep -q '!!:'; then
    return 0
  else
    return 1
  fi
}

# Verifica se o script NÃO está sendo executado como root
if [[ "$EUID" -ne 0 ]]; then
  echo "O script precisa ser executado com privilégios de root."

  # Verifica se a senha root está definida
  if check_root_password; then
    echo "A senha root parece estar definida. Tentando executar como root..."
    sudo "$0" "$@"
    exit $?
  else
    echo "A senha root não está definida. Você precisa definir uma senha root para continuar."
    sudo passwd root
    echo "Senha root definida. Reexecutando o script como root..."
    sudo "$0" "$@"
    exit $?
  fi
else
  echo "Você já está logado como root. Continuando com a execução do script."
fi

#Atualiza lista de pacotes
sudo apt update
#Desinstala firefox
sudo apt purge firefox -y
#Instala firefox ESR 
sudo apt install firefox-esr -y
sudo apt install xdotool -y
#Grava Script de atualização de tela
printf '#!/bin/bash\n\nrandom_wait_seconds=$(( RANDOM %% 841 ))\n\nsleep "$random_wait_seconds"\n\nDISPLAY=:0 xdotool key ctrl+shift+r\n\nexit 0\n' > /home/user/Downloads/atualizaTelaRandom.sh
#Permite atualizaTelaRandom.sh a ser executado.
chmod +x /home/user/Downloads/atualizaTelaRandom.sh
#GravaCrontab
sudo crontab -u user -l | echo "*/15 * * * * /home/user/Downloads/atualizaTelaRandom.sh &" | sudo crontab -u user -
clear
#Lê e extrai o nome de conexão da máquina
connectionName=$(nmcli device show eth0 | grep "CONNECTION" | awk '{$1=""; sub(/^ +/, ""); print}')
#Lê e extrai o gateway da máquina
gateway=$(ip route show default | awk '{print $3}')

#Lê o Gateway e identifica a loja
case $gateway in
    10.1.1.1)
        echo "Detectada Loja Centro"
        filial=01
        loja=01
        NETMASK_CIDR=24
        GATEWAY=10.1.1.1
        ;;
    192.168.11.253)
        echo "Detectada Loja Bairro"
        filial=03
        loja=02
        NETMASK_CIDR=24
        GATEWAY=192.168.11.253
        ;;
    192.168.5.253)
        echo "Detectada Matupá"
        filial=09
        loja=03
        NETMASK_CIDR=23
        GATEWAY=192.168.5.253
        ;;
     192.168.7.253)
        echo "Detectada Alta Floresta"  
        filial=53
        loja=05
        NETMASK_CIDR=23
        GATEWAY=192.168.7.253
        ;;
     192.168.9.253)
        echo "Detectada Primavera do Leste"
        filial=52
        loja=06
        NETMASK_CIDR=23
        GATEWAY=192.168.9.253
        ;;
     192.168.57.193|192.168.57.1|192.168.156.1|192.168.57.129|10.253.7.129)
        echo "Detectada impressora de Confresa"
        filial=57
        loja=07
        NETMASK_CIDR=25
        GATEWAY=10.253.7.129
        ;;
    *)
        echo "Valor de gateway não mapeado: $gateway"
        ;;
esac

# Ajustes de Rede
# Certifique-se de que NetworkManager esteja rodando
if ! systemctl is-active --quiet NetworkManager; then
  echo "O NetworkManager não está ativo. Iniciando..."
  sudo systemctl start NetworkManager
  if [ $? -ne 0 ]; then
    echo "Erro ao iniciar o NetworkManager. Saindo."
    exit 1
  fi
fi

# Obtém o método de configuração IPv4 atual da conexão
current_method=$(nmcli connection show "$connectionName" | grep "ipv4.method" | awk '{print $2}')

# Verifica se o método já está como "manual"
if [ "$current_method" == "manual" ]; then
  echo "A configuração de IP já está como estática (manual). Nenhuma alteração seŕa realizada."
else
  echo "Digite o endereço IP para o terminal:"
  read -p "Endereço IP (ex: 192.168.1.100): " IP_ADDRESS
  sudo nmcli connection modify "$connectionName" ipv4.dns "192.168.12.1 192.168.2.1"
  sudo nmcli connection modify "$connectionName" ipv4.dns-search "redemachado.local"
  sudo nmcli connection modify "$connectionName" ipv4.addresses "$IP_ADDRESS/$NETMASK_CIDR"
  sudo nmcli connection modify "$connectionName" ipv4.gateway "$GATEWAY"
  sudo nmcli connection modify "$connectionName" ipv4.method manual
  echo "Configurações serão aplicadas ao reinício de sistema"
  sleep 5

  echo "Configuração de rede concluída."
fi
#Fim Configuração de rede

echo "Ajustando fuso horário..."
# Ajusta Fuso horário
case $filial in
  01 | 03 | 09 | 52 | 53)
    sudo raspi-config nonint do_change_timezone America/Cuiaba
    ;;
  57)
    sudo raspi-config nonint do_change_timezone America/Sao_Paulo
    ;;
  *)
    echo "Erro: Valor inválido para a variável 'filial'."
    exit 1
    ;;
esac

#Instala o PiApps
echo "Instalando PiApps (ou não)"
#wget -qO- https://raw.githubusercontent.com/Botspot/pi-apps/master/install | bash

#Atualiza configuração de audio
echo "Configurando audio"
sudo raspi-config nonint do_audio 0

clear
#Seleciona nome de host (utilize padrão do machado)
validar_numRaspi() {
  while true; do
    echo "Esse é o número host RPI52xxx-LJ06, aonde deve digitar apenas os 3 digitos de "xxx""
    echo "O restante será preenchido automaticamente"
    read -p "Digite o número do Raspberry (3 dígitos numéricos): " numRaspi

    # Verifica se a entrada tem 3 dígitos e se é numérica
    if [[ "$numRaspi" =~ ^[0-9]{3}$ ]]; then
      break #Valida a entrada e sai do loop caso entrada válida
    else
      echo "Entrada inválida. Digite um número de 3 dígitos."
    fi
  done

  echo "Sucesso!"
}

# Chama a função para validar e obter o numRaspi
validar_numRaspi

#Grava nome do host raspberry
sudo raspi-config nonint do_hostname RPI${filial}${numRaspi}-LJ${loja}
echo "Nome de Host configurado para RPI${filial}${numRaspi}-LJ${loja}"

#Configura rede (acelera boot)
sudo raspi-config nonint do_boot_wait 0

#Define firefox como padrão
sudo raspi-config nonint do_browser firefox

#Desabilita screenblanking
sudo raspi-config nonint do_blanking 1

#Ativa SSH
sudo raspi-config nonint do_ssh 0

#Configurando Localização Raspiberry
sudo raspi-config nonint do_change_locale pt_BR.UTF-8

#Configura layout teclado
sudo raspi-config nonint do_configure_keyboard br

#Configura para desativar o Waylan e utilizar interface X11
sudo raspi-config nonint do_wayland W1

#Menu de escolha - tipo de ativo
echo "Escolha uma das opções abaixo:"
echo "1 - Ruptura"
echo "2 - Ruptura Frios"
echo "3 - Vinhos"
echo "4 - Ilha Frios"
echo "5 - Televisores Sessão"
echo "6 - VideoWallLancho"
echo "7 - Colabore"
read -p "Digite o número da sua escolha: " escolha

# Variável para armazenar o tipo de ativo
tipoAtivo=""

# Verifica a escolha do usuário e atribui o valor à variável
case "$escolha" in
  1)
    tipoAtivo="ruptura"
    ;;
  2)
    tipoAtivo="rupturaFrios"
    ;;
  3)
    tipoAtivo="vinhos"
    ;;
  4)
    tipoAtivo="ilhaFrios"
    ;;
  5)
    tipoAtivo="TelevisoresSessao"
    ;;
  6)
    tipoAtivo="videowall"
    ;;
  7)
    tipoAtivo="colabore"
    ;;
  *)
    echo "Opção inválida."
    exit 1
    ;;
esac
#Remove os "zeros" à esquerda, necessário para não atrapalhar o script
filial="${filial##"0"}"

#Grava os dados no arquivo AutoStart
printf "%s\n%s\n%s\n%s\n%s\n%s\n%s\n" "@lxpanel --profile LXDE-pi" "@pcmanfm --desktop --profile LXDE-pi" "@xscreensaver -no-splash" "@xset s off" "@xset -dpms" "@xset s noblank" "@firefox-esr --kiosk --noerrdialogs --disable-infobars http://192.168.12.223/$tipoAtivo/$filial/1/" > /etc/xdg/lxsession/LXDE-pi/autostart
sudo chmod +x /etc/xdg/lxsession/LXDE-pi/autostart

#Grava automaticamente as senhas do VNC de acordo com o gateway configurado.
case "$filial" in
  1)
    senhaVNC="loja1"
    ;;
  3)
    senhaVNC="loja2"
    ;;
  9)
    senhaVNC="matupa"
    ;;
  52)
    senhaVNC="pleste"
    ;;
  53)
    senhaVNC="floresta"
    ;;
  57)
    senhaVNC="confresa"
    ;;
  *)
    senhaVNC="Filial não encontrada" # Caso a filial não corresponda a nenhuma das opções
    ;;
esac

#Ativa o VNC
sudo raspi-config nonint do_vnc 0
#Define opções de senha e criptografia
sudo printf "Encryption=PreferOff\nAuthentication=VncAuth" > /root/.vnc/config.d/vncserver-x11

# Definir a senha do VNC para $senhaVNC e ativar login legado
sudo vncpasswd -service -legacy <<< "$senhaVNC"
echo "Senha do VNC definida e login legado ativado."

# Configurar o RealVNC para iniciar automaticamente no boot
sudo systemctl enable vncserver-x11-serviced
echo "RealVNC configurado para iniciar automaticamente."

echo "Configuração do RealVNC concluída."

#Atualiza pacotes do raspi
echo "Atualizando todos os pacotes"
sleep 3
sudo apt upgrade -y
sudo apt auto-remove -y
clear

echo "Script realizado por Jurandir Moratelli IG @jjmoratelli ;). Aguarde reinicio."
sleep 10
sudo reboot
